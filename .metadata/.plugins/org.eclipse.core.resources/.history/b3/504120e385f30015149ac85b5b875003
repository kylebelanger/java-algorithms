package assignment_two;
import java.awt.RenderingHints.Key;
import java.util.Scanner;

/** =================================================================
*   main Class
*   ===============================================================*/
public class main {

    /** ----------------------------------------------------------------
  	*   Start global variables
  	*   ---------------------------------------------------------------*/
  	static Scanner keyboard = new Scanner(System.in);
  	private static int mainInput;
  	private static int subInput;
    static BST<String, Integer> st;

    /** ----------------------------------------------------------------
  	*   Start Methods
  	*   ---------------------------------------------------------------*/

    /** ----------------------------------------------------------------
  	*   welcomeMessage - display message, get initial input
  	*		@return input
  	*   ---------------------------------------------------------------*/
  	private static int welcomeMessage() {
  			System.out.println("\nBinary Search Tree.\n\n\tEnter '0' to exit.\n\tEnter '1' to create binary search tree.\n\tEnter '2' to create red-black tree.");
  			System.out.print("\n>\t");
  		 	return getInput();
  	}

    /** ----------------------------------------------------------------
  	*   BESTMessage - display BST message, get initial input
  	*		@return input
  	*   ---------------------------------------------------------------*/
  	private static int BSTMessage() {
  			System.out.print("\nBST Analysis: \n\n\tEnter '0' to return to main menu.\n\tEnter '1' to add.\n\tEnter '2' to remove.\n\tEnter '3' to search.\n");
  			System.out.print("\n>\t");
  		 	return getInput();
  	}

    /** ----------------------------------------------------------------
  	*   getInput - resets keyboard input
  	*		@return input
  	*   ---------------------------------------------------------------*/
  	private static int getInput() {
  			return keyboard.nextInt();
  	}

    /** ----------------------------------------------------------------
  	*   createBST - create binary search tree
  	*   @param capacity
  	*   ---------------------------------------------------------------*/
  	private static void createBST(int capacity) {
        st = new BST<String, Integer>();
  			System.out.println("\nCreating binary search tree of '" + capacity + "' elements.");

  			// add x items to tree
  			for (int i = 0; i < capacity; i++) {
            st.put("Key " + i, i);
  			}
  	}

  	/** ----------------------------------------------------------------
  	*   main - start tests
  	*   ---------------------------------------------------------------*/
    public static void main(String[] args) {

        // get input
  			mainInput = welcomeMessage();

        // execute commands until exiting
  			while (mainInput != 0) {

            // BST analysis
    				if (mainInput == 1) {
                // create initial tree
                System.out.print(">\tEnter binary search tree capacity (integer): \t");
                createBST(getInput());

                // get next command
                subInput = BSTMessage();

                while (subInput != 0) {
                      // add
                      if (subInput == 1) {
                          System.out.print(">\tEnter item to add: \t");
                          subInput = getInput();
                          st.put("Key " + subInput, subInput);
                          subInput = BSTMessage();
                      }
                      // remove
                      else if (subInput == 2) {
                          //queue.dequeue();
                          subInput = BSTMessage();
                      }
                      // search
                      else if (subInput == 3) {
                          for (String key : st.keys()) {
                            System.out.println(key);
                          }
                          subInput = BSTMessage();
                      }
                      // error
                      else {
                          System.out.println("\n>\tInvalid input value.");
                          subInput = BSTMessage();
                      }
                }
                // update main input
                mainInput = welcomeMessage();
            }

        };

        /* create new BST object
        BST<String, Integer> st = new BST<String, Integer>();

        // add items to tree
        for (int i = 0; i < 10; i++) {
          st.put("Key " + i, i);
        }

        // traverse
        for (String key : st.keys()) {
          System.out.println(key);
        }*/

    }

}
