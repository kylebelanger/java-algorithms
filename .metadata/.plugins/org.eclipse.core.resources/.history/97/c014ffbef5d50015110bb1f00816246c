package assignment_one;

/** =================================================================
*   LinkedListIm Class
*   Implements linked list functions
*   ===============================================================*/

public class LinkedListIm<T> {

    /** ----------------------------------------------------------------
    *   Start global variables
    *   ---------------------------------------------------------------*/
    private Node<T> head;
    private Node<T> tail;

    /** ----------------------------------------------------------------
    *   Start Methods
    *   ---------------------------------------------------------------*/

    /** ----------------------------------------------------------------
    *   addAfter - Adds an element at the end of the list or specific index.
    *   @param after
    *   @param element
    *   ---------------------------------------------------------------*/
    public void addAfter(T after, T element){

        Node<T> tmp = head;
        Node<T> refNode = null;

        // determine which action to perform based on param
        if (after != null) {

            // traverse all elements until given element is found
            while (true){
                if (tmp == null){
                    break;
                }
                if(tmp.compareTo(after) == 0){
                    //found the target node, add after this node
                    refNode = tmp;
                    break;
                }
                tmp = tmp.getNextRef();
            }

            if(refNode != null){
                //add element after the target node
                Node<T> nd = new Node<T>();
                nd.setValue(element);
                nd.setNextRef(tmp.getNextRef());
                if(tmp == tail){
                    tail = nd;
                }
                tmp.setNextRef(nd);
            }
            else {
              system.out.println("Error: Cannot find element at specific index. Adding to front of list.")
            }
        }
        else {
            Node<T> nd = new Node<T>();
            nd.setValue(element);

            // check if the list is empty
            if (head == null) {
               // since there is only one element, both head and tail points to the same object.
               head = nd;
               tail = nd;
            }
            else {
               // set current tail next link to new node
               tail.setNextRef(nd);
               // set tail as newly created node
               tail = nd;
            }
        }
    }




    public void deleteAfter(T after){

        Node<T> tmp = head;
        Node<T> refNode = null;
        System.out.println("Traversing to all nodes..");
        /**
         * Traverse till given element
         */
        while(true){
            if(tmp == null){
                break;
            }
            if(tmp.compareTo(after) == 0){
                //found the target node, add after this node
                refNode = tmp;
                break;
            }
            tmp = tmp.getNextRef();
        }
        if(refNode != null){
            tmp = refNode.getNextRef();
            refNode.setNextRef(tmp.getNextRef());
            if(refNode.getNextRef() == null){
                tail = refNode;
            }
            System.out.println("Deleted: "+tmp.getValue());
        } else {
            System.out.println("Unable to find the given element...");
        }
    }




    public void traverse(){

        Node<T> tmp = head;
        while(true){
            if(tmp == null){
                break;
            }
            System.out.println(tmp.getValue());
            tmp = tmp.getNextRef();
        }
    }


}
