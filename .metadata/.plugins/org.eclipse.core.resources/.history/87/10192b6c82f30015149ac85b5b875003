package assignment_two;
import java.awt.RenderingHints.Key;
import java.util.Scanner;

/** =================================================================
*   main Class
*   ===============================================================*/
public class main {

    /** ----------------------------------------------------------------
  	*   Start global variables
  	*   ---------------------------------------------------------------*/
  	static Scanner keyboard = new Scanner(System.in);
  	private static int mainInput;
  	private static int subInput;
    static BST<String, Integer> st;

    /** ----------------------------------------------------------------
  	*   Start Methods
  	*   ---------------------------------------------------------------*/

    /** ----------------------------------------------------------------
  	*   welcomeMessage - display message, get initial input
  	*		@return input
  	*   ---------------------------------------------------------------*/
  	private static int welcomeMessage() {
  			System.out.println("\nBinary Search Tree.\n\n\tEnter '0' to exit.\n\tEnter '1' to perform queue analysis.\n\tEnter '2' to perform linked list analysis.");
  			System.out.print("\n>\t");
  		 	return getInput();
  	}

    /** ----------------------------------------------------------------
  	*   getInput - resets keyboard input
  	*		@return input
  	*   ---------------------------------------------------------------*/
  	private static int getInput() {
  			return keyboard.nextInt();
  	}

  	/** ----------------------------------------------------------------
  	*   main - start tests
  	*   ---------------------------------------------------------------*/
    public static void main(String[] args) {

        // initial input
  			mainInput = welcomeMessage();

  			while (mainInput != 0) {
            // create initial queue
            System.out.print(">\tEnter queue capacity (integer): \t");
            st = new BST<String, Integer>(getInput());

            // add items to tree
            for (int i = 0; i < 10; i++) {
              st.put("Key " + i, i);
            }

            // traverse
            for (String key : st.keys()) {
              System.out.println(key);
            }

        };

        /* create new BST object
        BST<String, Integer> st = new BST<String, Integer>();

        // add items to tree
        for (int i = 0; i < 10; i++) {
          st.put("Key " + i, i);
        }

        // traverse
        for (String key : st.keys()) {
          System.out.println(key);
        }*/

    }

}
