package assignment_one;
import java.util.Scanner;

/** =================================================================
*   main Class
*   ===============================================================*/
public class main {

	/** ----------------------------------------------------------------
	*   Start global variables
	*   ---------------------------------------------------------------*/
	static Scanner keyboard = new Scanner(System.in);
	private static int mainInput;
	private static int subInput;
	static QueueIm queue;
	static LinkedListIm<Integer> ll;

	/** ----------------------------------------------------------------
	*   Start Methods
	*   ---------------------------------------------------------------*/

	/** ----------------------------------------------------------------
	*   main - called on loading.
	*   ---------------------------------------------------------------*/
	public static void main(String[] args) {

			// initial input
			mainInput = welcomeMessage();

			// application flow
			while (mainInput != 0) {

					// queue analysis
					if (mainInput == 1) {
								// create initial queue
								System.out.print("\nEnter queue capacity (integer): \t");
								createQueue(getInput());
								// get input
								subInput = queueMessage();

								// queue application flow
								if (subInput == 1) {
										System.out.print("\nEnter item to add to queue");
										queue.enqueue(getInput());
										subInput = queueMessage();
								}
								else if (subInput == 2) {
										queue.dequeue();
										subInput = queueMessage();
								}
								else if (subInput == 3) {
										queue.front();
										subInput = queueMessage();
								}
								else {
										mainInput = welcomeMessage();
								}
					}
					// linked list analysis
					else if (mainInput == 2) {
								// create initial linkedlist
								System.out.print("\nEnter linked list capacity (integer): \t");
								createLinkedList(getInput());
								// get input
								subInput = linkedlistMessage();

								// queue application flow
								if (subInput == 1) {
										System.out.print("\nEnter item to add to LinkedList: \t");
										ll.addAfter(null, getInput());
										subInput = queueMessage();
								}
								else if (subInput == 2) {
										System.out.print("\nEnter item to delete after: \t");
										ll.deleteAfter(getInput());
										subInput = queueMessage();
								}
								else if (subInput == 3) {
										System.out.print("\nEnter index to retrive: \t");
										// algorithm to get index
										subInput = queueMessage();
								}
								else {
										mainInput = welcomeMessage();
								}
					}
					else {
							System.out.println("\nInvalid input value.");
							mainInput = welcomeMessage();
					}
			}
			System.out.print("\nTerminal exiting.");

	}


	/** ----------------------------------------------------------------
	*   welcomeMessage - display message, get initial input
	*		@return input
	*   ---------------------------------------------------------------*/
	private static int welcomeMessage() {
			System.out.println("\nData structure analysis - linked lists, and queues.\n\nEnter '0' to exit.\nEnter '1' to perform queue analysis.\nEnter '2' to perform linked list analysis.\n");
		 	return getInput();
	}

	/** ----------------------------------------------------------------
	*   queuemessage - display queue message, get initial input
	*		@return input
	*   ---------------------------------------------------------------*/
	private static int queuemessage() {
			System.out.print("\nQueue Analysis - \nEnter '0' to return to main menu. Enter '1' to enqueue. Enter '2' to dequeue. Enter '3' for front.\t");
		 	return getInput();
	}

	/** ----------------------------------------------------------------
	*   linkedlistMessage - display linkedlist message, get initial input
	*		@return input
	*   ---------------------------------------------------------------*/
	private static int linkedlistMessage() {
			System.out.print("\LinkedList Analysis - \nEnter '0' to return to main menu. Enter '1' to add. Enter '2' to remove. Enter '3' to get at index. Enter '4' to traverse all elements. Enter '5' to bubble sort.\t");
		 	return getInput();
	}

	/** ----------------------------------------------------------------
	*   getInput - resets keyboard input
	*		@return input
	*   ---------------------------------------------------------------*/
	private static int getInput() {
			return keyboard.nextInt();
	}

	/** ----------------------------------------------------------------
	*   createQueue - create initial queue
	*   @param capacity
	*   ---------------------------------------------------------------*/
	private static void createQueue(int capacity) {
			// create queue object with capacity of 10
			queue = new QueueIm(capacity);
			// message
			System.out.println("\nCreating queue of '" + capacity + "' elements.");

			// add x items to queue
			for (int i = 0; i < capacity; i++) {
				queue.enqueue(i);
			}
	}

	/** ----------------------------------------------------------------
	*   createLinkedList - create initial linkedlist
	*   @param capacity
	*   ---------------------------------------------------------------*/
	public static void createLinkedList(int capacity) {
			ll = new LinkedListIm<Integer>();

			for (int i = 0; i < capacity; i++) {
				ll.addAfter(null, i);
			}

			//ll.addAfter(76, 54);
			//ll.deleteAfter(76);
			//ll.traverse(false);
			//ll.addAfter(3, 100);
			//ll.traverse(false);
	}

}
